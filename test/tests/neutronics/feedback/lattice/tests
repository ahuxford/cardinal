[Tests]
  [pincell]
    type = Exodiff
    input = openmc_master.i
    exodiff = 'openmc_master_out.e openmc_master_out_openmc0.e'
    requirement = "Temperatures, densities, and a heat source shall be coupled between OpenMC "
                  "and MOOSE and a solid pincell model when the model is set up with distributed cells. "
                  "The solution for temperature, density, and heat source show an exact agreement with "
                  "a case built without distributed cells in ../single_level."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [pincell_null_fixed_mesh]
    type = Exodiff
    input = openmc_master.i
    exodiff = 'openmc_master_out.e openmc_master_out_openmc0.e'
    requirement = "The system shall correctly re-initialize the same mapping when the MooseMesh does not change "
                  "during a simulation."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [heating]
    type = CSVDiff
    input = openmc_scores.i
    csvdiff = heating_out.csv
    cli_args = 'Outputs/file_base=heating_out'
    requirement = "The system shall allow the user to specify a 'heating' score in the OpenMC tally."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [heating_local]
    type = CSVDiff
    input = openmc_scores.i
    csvdiff = heating_local_out.csv
    cli_args = 'Problem/tally_score=heating_local Outputs/file_base=heating_local_out'
    requirement = "The system shall allow the user to specify a 'heating-local' score in the OpenMC tally."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [damage_energy]
    type = CSVDiff
    input = openmc_scores.i
    csvdiff = damage_energy_out.csv
    cli_args = 'Problem/tally_score=damage_energy Outputs/file_base=damage_energy_out'
    requirement = "The system shall allow the user to specify a 'damage-energy' score in the OpenMC tally."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [fission_q_prompt]
    type = CSVDiff
    input = openmc_scores.i
    csvdiff = fission_q_prompt_out.csv
    cli_args = 'Problem/tally_score=fission_q_prompt Outputs/file_base=fission_q_prompt_out'
    requirement = "The system shall allow the user to specify a 'fission-q-prompt' score in the OpenMC tally."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [fission_q_recoverable]
    type = CSVDiff
    input = openmc_scores.i
    csvdiff = fission_q_recoverable_out.csv
    cli_args = 'Problem/tally_score=fission_q_recoverable Outputs/file_base=fission_q_recoverable_out'
    requirement = "The system shall allow the user to specify a 'fission-q-recoverable' score in the OpenMC tally."
    required_objects = 'OpenMCCellAverageProblem'
  []
  [duplicate_variable]
    type = RunException
    input = openmc.i
    cli_args = "AuxVariables/heat_source/order=FIRST"
    expect_err = "Cardinal is trying to add an auxiliary variable named 'heat_source', but you already have a variable by this name."
    requirement = "The system shall error if the user adds a duplicate variable with a name Cardinal reserves for OpenMC coupling."
    required_objects = 'OpenMCCellAverageProblem'
  []
[]
